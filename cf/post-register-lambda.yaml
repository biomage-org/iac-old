AWSTemplateFormatVersion: "2010-09-09"
Description: Setting up a lambda function to handle user invites for non-existing users

Parameters:
  Environment:
    Type: String
    Default: development
    AllowedValues:
      - development
      - staging
      - production
    Description: The environment for which the tables need to be created.

Outputs:
  PostRegisterLambdaArn:
    Description: ARN of PostRegisterLambda
    Value: !GetAtt PostRegisterLambda.Arn
    Export:
      Name: !Sub PostRegisterLambdaArn-${Environment}
  PostRegisterTopicArn:
    Description: ARN of PostRegisterTopic
    Value: !Ref PostRegisterTopic
    Export:
      Name: !Sub PostRegisterTopicArn-${Environment}

Resources:
  PostRegisterLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: !Sub "can-create-log-group-in-cloudwatch-${Environment}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                Resource:
                  - Fn::Sub: "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: !Sub "can-add-logs-in-cloudwatch-${Environment}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - Fn::Sub: "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/post-register-invite-lambda-${Environment}:*"
        - PolicyName: !Sub "can-post-to-post-registration-sns-${Environment}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource:
                  - Fn::Sub: "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:post-registration-user-access-${Environment}-default"

  PostRegisterTopic:
    Type: AWS::SNS::Topic
    Properties:
      KmsMasterKeyId: "alias/aws/sns"
      TopicName: !Sub "post-registration-user-access-${Environment}-default"

  PostRegisterLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs14.x
      Role: !GetAtt PostRegisterLambdaRole.Arn
      Handler: index.handler
      Environment:
        Variables:
          TOPIC_ARN: !Ref PostRegisterTopic
          CLUSTER_ENV: !Sub "${Environment}"
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');

          const region = process.env.AWS_REGION;

          const addUserPermission = async (userEmail, userId) => {
            const sns = new AWS.SNS({ region });

            const message = {
              userEmail,
              userId
            };

            console.log(`Sending SNS message for user ${message}`)

            await sns.publish({
              Message: JSON.stringify(message),
              TopicArn: process.env.TOPIC_ARN,
              MessageAttributes: {
                type: {
                  DataType: 'String',
                  StringValue: 'PostUserRegistration'
                }
              }
            }, () => {}).promise();
          };

          exports.handler = async (event, context, callback) => {

            const {
              email: userEmail,
              sub: userId,
            } = event.request.userAttributes;

            console.log(`== Handling post-registration for ${userEmail} ==`)

            await addUserPermission(userEmail, userId);

            console.log("== Successfully added user ${userEmail} ==")

            callback(null, event);
          };

  LoggingGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/post-invite-registration-lambda-${Environment}"
      RetentionInDays: 14
