AWSTemplateFormatVersion: "2010-09-09"
Description: Lambda to send email and an API Gateway to expose it

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - production
    Description: The environment for which the lambda is created

Resources:
  EmailSenderLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: !Sub "can-send-emails-${Environment}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'ses:SendEmail'
                  - 'ses:SendRawEmail'
                Resource: "*"
                
        - PolicyName: !Sub "can-create-log-group-in-cloudwatch-${Environment}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                Resource:
                  - Fn::Sub: "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/course-registration-email-${Environment}"
                  
        - PolicyName: !Sub "can-add-logs-in-cloudwatch-${Environment}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - Fn::Sub: "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/course-registration-email-${Environment}:*"

  EmailSenderLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub course-registration-email-${Environment}
      Runtime: nodejs14.x
      Role: !GetAtt EmailSenderLambdaRole.Arn
      Handler: index.handler
      Environment:
        Variables:
          AWS_ACCOUNT_ID: !Sub "${AWS::AccountId}"
          CLUSTER_ENV: !Ref Environment
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const axios = require('axios'); 
          const toArray = require('stream-to-array'); 
          const SES = new AWS.SES();
          const S3 = new AWS.S3();

          exports.handler = async (event, context, callback) => {
            const body = JSON.parse(event.body);
            const email = body.email;
            const fileName = 'payment_instructions.pdf'; // Set your filename here

            // Fetch file from Google Drive
            let file;
            try {
              const response = await axios({
                method: 'get',
                url: 'https://drive.google.com/uc?export=download&id=17v69SoSRBMPxp3-k1xQ0LVxlJjv3Fij0',
                responseType: 'stream',
              });

              const arr = await toArray(response.data);
              file = Buffer.concat(arr).toString('base64');
            } catch (err) {
              console.log('Error fetching file', err);
              callback(err);
              return;
            }

            const rawEmail =
              `From: 'Biomage Courses <courses@biomage.net>'\n` +
              `To: ${email}\n` +
              `Subject: 'Welcome to the course “Mastering Single Cell RNA-seq Data Analysis with Cellenics”'\n` +
              `MIME-Version: 1.0\n` +
              `Content-Type: multipart/mixed; boundary="NextPart"\n\n` +
              
              `--NextPart\n` +
              `Content-Type: text/plain\n\n` +
              `Hi,\n\n` +
              
              `Thank you for registering for our course “Mastering Single Cell RNA-seq Data Analysis with Cellenics”. In this email I’m sharing with you further details to get you started on the course.\n\n` +
              
              `The first lessons of the course are already available!\n\n` +
              
              `We will be releasing new lessons on a weekly basis until the end of the course. To enhance the learning experience and make the course more engaging and interactive, during the first 2 months we will be hosting optional live group sessions fortnightly, which all participants can join. During these sessions, we will answer any questions you may have, and you will have the opportunity to share how you are using Cellenics in your research project, if you wish. We will send you an invite for the first session soon. There are no deadlines for this course, and you will have access to all materials as long as you have registered and paid the fee.\n\n` +
              
              `If you will not follow the course on a weekly basis, don’t worry. You will always have access to the videos and you can watch them at your own pace. Furthermore, if you start the course later, you can still participate in the live group sessions whenever you choose. These sessions will not be a prerequisite and will not be linked to any specific module. They are just an optional extra to make the course more interactive. Please, note that the live group sessions will be offered only during the first two months.\n\n` +
              
              `To have access to the course, please follow these steps:\nBefore starting the course we kindly ask you to create a Cellenics account at scp.biomage.net, if you don’t have one already.\nSubmit payment for the $450 USD fee (payment instructions are attached to this email - please, contact us if the payment is handled by your institution and they require an invoice or further details). Please, when filling in the payment details, include the email address you used to register.\n\n` +
              
              `If you have any questions about payment or need assistance with the payment process, please don't hesitate to reach out to us. We are committed to ensuring a smooth and successful enrollment process for all of the participants.\n\n` +
              
              `Once the two steps are completed, we will send you the link to the first videos and the course material. Subsequently released lessons will always be accessible to you.\nYou will also receive a Calendly link where you can book your 30-minutes 1-2-1 meeting with one of our bioinformaticians.\n\n` +
              
              `Once again, thank you for your interest in the course, and we look forward to having you as a participant of our course.\n\n` +
              
              `Best wishes,\nBiomage team\n\n` +
              
              `--NextPart\n` +
              `Content-Type: application/pdf; name="${fileName}"\n` +
              `Content-Disposition: attachment; filename="${fileName}"\n` +
              `Content-Transfer-Encoding: base64\n\n` +
              `${file}\n\n` +
              
              `--NextPart--`;


            const params = {
              RawMessage: { Data: rawEmail },
              Destinations: [email],
              Source: 'your-email@example.com',
            };

            try {
              const data = await SES.sendRawEmail(params).promise();
              console.log(`Email sent to: ${email}`);
              callback(null, data);
            } catch (error) {
              console.error(error);
              callback(error);
            }
          };

  LoggingGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/course-registration-email-${Environment}"
      RetentionInDays: 1

  EmailSenderApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties: 
      Name: !Sub email-sender-api-${Environment}
  
  LambdaApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref EmailSenderApi
      ResourceId: !GetAtt EmailSenderApi.RootResourceId
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EmailSenderLambda.Arn}/invocations

  LambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties: 
      FunctionName: !GetAtt EmailSenderLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${EmailSenderApi}/*/*/*

  Deployment:
    DependsOn: LambdaApiMethod
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref EmailSenderApi
