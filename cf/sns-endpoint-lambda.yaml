AWSTemplateFormatVersion: "2010-09-09"
Description: Lambda to forward SNS messages to API endpoints

Parameters:
  Environment:
    Type: String
    Default: development
    AllowedValues:
      - development
      - staging
      - production
    Description: The environment for which the lambda is created
  SandboxID:
    Type: String
    Default: default
    Description: The sandbox ID of the environment that this topic is created for.

Conditions:
  isProd: !Equals [!Ref Environment, "production"]
  isDev: !Equals [!Ref Environment, "development"]

Resources:
  SNSEndpointLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: !Sub "can-create-required-vpc-access-${Environment}-${SandboxID}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:AssignPrivateIpAddresses"
                  - "ec2:UnassignPrivateIpAddresses"
                Resource:
                  - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: !Sub "can-describe-network-interfaces-${Environment}-${SandboxID}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:DescribeNetworkInterfaces"
                Resource:
                  - "*"
        - PolicyName: !Sub "can-create-log-group-in-cloudwatch-${Environment}-${SandboxID}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sns-endpoint-lambda-${Environment}-${SandboxID}"
        - PolicyName: !Sub "can-add-logs-in-cloudwatch-${Environment}-${SandboxID}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sns-endpoint-lambda-${Environment}-${SandboxID}:*"

  SNSEndpointLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub sns-endpoint-lambda-${Environment}-${SandboxID}
      # Using 3.7 so that we can import requests directly from botocore. See https://stackoverflow.com/a/48495770/1940886
      # Otherwise we'd have to upload the Lambda code and its dependencies to S3 and use the files from there.
      Runtime: python3.7
      Role: !GetAtt SNSEndpointLambdaRole.Arn
      Handler: index.lambda_handler
      VpcConfig:
        SecurityGroupIds:
          Fn::Split: [",", Fn::ImportValue: !Sub "eksctl-biomage-${Environment}-cluster::ClusterSecurityGroupId"]
        SubnetIds:
          Fn::Split: [",", Fn::ImportValue: !Sub "eksctl-biomage-${Environment}-cluster::SubnetsPrivate"]
      Environment:
        Variables:
          DOMAIN_NAME: !If [
                        isDev, "http://host.docker.internal:3000", !If [
                        isProd, !Sub ["https://api.${DomainName}", DomainName: !Join ["", [ Fn::ImportValue: !Sub "DomainName-${Environment}" ]]],
                        !Sub ["https://api-${SandboxID}.${DomainName}", DomainName: !Join ["", [ Fn::ImportValue: !Sub "DomainName-${Environment}" ]]]
                      ]]
      Code:
        ZipFile: |
          from botocore.vendored import requests
          import json

          def lambda_handler(event, context):
            print("EVENT: ", event)
            sns_message_payload = event["Records"][0]["Sns"]

            message_body = json.loads(sns_message_payload["Message"])

            if message_body.get("experimentId"):
                print("[experimentId] ", message_body.get("experimentId"))
            else:
                print("Kubernetes event")

            url = ""

            sns_message_headers = {
                "x-amz-sns-message-id": sns_message_payload['MessageId'],
                "x-amz-sns-message-type": sns_message_payload["Type"],
                "x-amz-sns-subscription-arn" : event["Records"][0]["EventSubscriptionArn"],
                "x-amz-sns-topic-arn" : sns_message_payload["TopicArn"],
                "Content-Type": "text/plain",
                'Connection':'close'
            }

            application_json_headers = {
                "Content-Type": "application/json"
            }

            if message_body.get("reason") == "BackOff":
                url = f"{message_body.get('apiUrl')}/v2/kubernetesEvents"
                data = message_body
                headers = application_json_headers
            elif sns_message_payload["MessageAttributes"]["type"]["Value"] == "PipelineResponse":
                url = f"{message_body.get('apiUrl')}/v2/pipelineResults"
                data = sns_message_payload
                headers = sns_message_headers
            elif sns_message_payload["MessageAttributes"]["type"]["Value"] == "GEM2SResponse":
                url = f"{message_body.get('apiUrl')}/v2/gem2sResults"
                data = sns_message_payload
                headers = sns_message_headers

            print("[ENDPOINT CALLED] ", url)
            print("[DATA PAYLOAD] ", json.dumps(data))

            try:
                r = requests.post(url = url, data = json.dumps(data), headers = headers, verify=False, timeout=300)
                print("[SUCCESS] ", r.content)
                print("***********************")
                return {
                    'statusCode': 200,
                    'body': {"alles": "gut"}
                }
            except Exception as e:
                print("[FAILURE] ", e)
                print("***********************")
                return {
                    'statusCode': 500,
                    'body': {"error": "yes"}
                }

  LoggingGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/sns-endpoint-lambda-${Environment}-${SandboxID}"
      RetentionInDays: 3
